# Embedding with Go
Gain performance, reliability and flexibility


Loh Siu Yin
Engineer, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

## A simple production ready web API with Go

## /hello API endpoint
.code 01_web/main.go

demo:
```
cd 01_web
go run *.go
hey -n 1000 -c 4 http://localhost:8080/hello
```

## How about a minimal frontend?

## net/http FileServer
.code 02_frontend/main.go

## index.html
.code 02_frontend/public/index.html

demo:
```
cd 02_frontend
go run *.go
http://localhost:8080/
```

## Deployment packaging options
- Docker container image:  
  Use a minimal image like gcr.io/distroless/static-debian12  
  Copy the public html, javacript and css along with the Go binary  
  into the container image.
- Static binary:  
  GOOS=windows GOARCH=amd64 go build -o mybin *.go  
  go tool dist list

## Embedding
03_embed/main.go:

.code 03_embed/main.go /import/,/public/
â‹®

.code 03_embed/main.go /main\(\)/,/FileServerFS/


03_embed/public/public.go:

.code 03_embed/public/public.go

## 
demo:

```
cd 03_embed
go build -o /tmp/j *.go
/tmp/j
hey -n 1000 -c 8 http://localhost:8080/
hey -n 1000 -c 8 http://localhost:8080/hello
```

## Objection! `real` APIs are not like /hello

They take much more than 1 milli-second to complete!

For example, order processing has to check the inventory database,
perhaps located on a separate system. And may
be require a **series** of API calls to execute.

demo: perhaps like this...
```
cd 04_stream
go build -o /tmp/j *.go
/tmp/j
curl 'http://localhost:8080/proc?id=A&n=10' && curl 'http://localhost:8080/proc?id=B&n=10'

http://localhost:8080/
```

## Embed a NATS message streaming server
.code 04_stream/main.go /init/,/Shutdown/+1

## procHandler: parse id and n
.code 04_stream/main.go /func procHandler/,/Atoi/+3

## procHandler: publish to "proc" stream
.code 04_stream/main.go /getJetStream/,/^}/

## procWorker works the "proc" stream
.code 04_stream/main.go /func procWorker/,/^}/

Note: Each message is explicitly acknowledged only after sucessful processing
